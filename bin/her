#!/usr/bin/env ruby

# **her** is an easy to use deployment tool. It assumes that you are using nginx
# together with <a href='http://google.com?q=unicorn'>unicorn</a>.

#### Workflow
#    her init
# (this generates all configuration files in config folder of your project)

# FileUtils are used to initialize *her* in the project directory
%w{fileutils}.each { |lib| require lib }

lib = File.expand_path('../lib', File.dirname(__FILE__))
$:.unshift lib unless $:.include?(lib)
require 'her'

# Tty class is inspired by Homebrew Tty class. It is used for almost all output.
#
# `onoe` prints an error if one arose.
# `okay` tries to execute a block
class Tty
  class << self
    def onoe error
      lines = error.to_s.split"\n"
      puts "#{red}Error#{reset}: #{lines.shift}"
      puts *lines unless lines.empty?
    end
    def okay title, &proc
      puts "#{blue}==>#{white} #{title}#{reset}"
      proc.call if proc
    rescue Exception => error
      print "#{red}Error#{reset}: "
      raise error
    end
    def blue; bold 34; end
    def white; bold 39; end
    def red; underline 31; end
    def yellow; escape 33 ; end
    def green; escape 32 ; end
    def reset; escape 0; end
    def em; underline 39; end
    def color n; escape "0;#{n}"; end
    def bold n; escape "1;#{n}"; end
    def underline n; escape "4;#{n}"; end
    def escape n; "\033[#{n}m" if $stdout.tty?; end
  end
end

module Her
  def run(q, options = {})
    q = %Q{cd #{deploy_base}/#{app_name}; #{q}} unless options.delete(:raw)
    puts "$ #{q}"
    system q or raise "Error executing: #{q}"
  end
  def run?(q, options = {}); run(q, options) rescue false; end
  def load_configurations!
    # Defaults
    deploy_base       "/var/www"
    rails             true
    is_first_deploy   false
    env               "production"

    load "./config/her.rb"

    raise "Must include 'app_name'" unless app_name
    raise "Must include 'rev'" unless rev
    app_root "#{deploy_base}/#{app_name}"
    rev_root "#{app_root}/release/#{rev}"
    shared_root "#{app_root}/shared"

    unicorn(unicorn ? unicorn : rails ? "unicorn_rails" : "unicorn")
  end
  def exec! args
    case args.shift
    when "help","h",nil; puts docs[:help].chomp
    when "version", "v"; puts Her::VERSION
    when "init","i"

      FileUtils.mkdir_p("config")
      ["unicorn.rb", "her.rb"].each do |file|
        if File.exists?("config/#{file}")
          puts "\t#{Tty.yellow}exists#{Tty.reset}  config/#{file}"
        else
          File.open("config/#{file}","w"){|f|f.write(docs[file.to_sym].chomp)}
          puts "\t#{Tty.green}create#{Tty.reset}  config/#{file}"
        end
      end

    # This command is run on server
    when "deploy","d"

      Tty.okay "Reading configuration file" do
        rev args.shift
        load_configurations!
      end

      Tty.okay "Symlinking shared files" do
        run "ln -s #{shared_root}/tmp #{rev_root}/tmp"
        run "ln -s #{shared_root}/config/database.yml #{rev_root}/config/database.yml"
        run "ln -s #{shared_root}/vendor/bundle #{rev_root}/vendor/bundle"
        run "ln -s #{shared_root}/log #{rev_root}/log"
      end

      Tty.okay "Running on_first_deploy callback", &on_first_deploy if is_first_deploy
      Tty.okay "Running on_deploy callback", &on_deploy

      Tty.okay "Reloading unicorn" do
        run "cat tmp/pids/unicorn.pid | xargs kill -SIGUSR2"
        run "kill -USR2 `cat $UNICORN_PID`"
      end                                             unless is_first_deploy

    else Tty.onoe("Unknown command. Run 'her help' for usage.")
    end
  end

  private

  def load_inline_files!
    file = ""; docs(Hash.new)

    io = ::IO.respond_to?(:binread) ? ::IO.binread(__FILE__) : ::IO.read(__FILE__)
    io.gsub("\r\n", "\n").split(/^__END__$/, 2)[1].each_line do |ln|
      if ln =~ /^@@\s*(.*\S)\s*$/
        docs[$1.to_sym] = file = ""
      else
        file << ln
      end
    end
  end

  def self.enable_options(*opts)
    opts.each{|op| eval"def #{op}(v = @#{op}, &b); @#{op} = b || v; end"}
  end

  enable_options :app_url, :app_name,
                 :deploy_base,
                 :on_deploy, :on_first_deploy, :is_first_deploy,
                 :rails, :env,
                 :docs,
                 :unicorn,
                 :app_root, :shared_root, :rev_root, :rev
end

if File.basename(__FILE__) == File.basename($0)
  args = ARGV.dup
  ARGV.clear

  include Her
  load_inline_files!
  exec! args
end

__END__

@@ help
Usage: her <command> [-v] ...

init                  # Generate configuration files (run once)
deploy rev_id         # Script run on server (DO NOT run yourself)

== Others ==
help                  # Show this screen
version               # Show version number

@@ her.rb
app_url     "myapp.company.com"
app_name    "myapp"

on_deploy do
  run "bundle install --deployment --without development test"
  run "RAILS_ENV=#{env} rake db:migrate"
end

on_first_deploy do
  run "RAILS_ENV=#{env} rake db:seed"
end

